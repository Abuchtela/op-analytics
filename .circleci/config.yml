version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@3.0.1
  utils: ethereum-optimism/circleci-utils@dev:first

parameters:
  run_job:
    type: enum
    default: "select_job"
    enum: ["select_job", "run_daily_upload", "run_daily_metadata"]

commands:
  push-test:
    description: >
      This command will take care to deploy the github pages.
    parameters:
      src-pages-dir:
        type: string
        description: "path to the folder to deploy"
      pages-branch:
        type: string
        default: "gh-pages"
        description: "The branch to deploy to"
      force-push:
        type: boolean
        default: false
        description: "Whether to force push"
      token-name:
        type: env_var_name
        default: GITHUB_APP_TOKEN
    steps:
      - run:
          name: Deploy github pages
          command: |

            #-----------------
            #temp section for debugging
            echo ${GITHUB_APP_TOKEN} > /tmp/gh_token
            #-----------------

            # set up initial variables
            pages_branch="<< parameters.pages-branch >>"
            pages_folder=$(realpath "<< parameters.src-pages-dir >>")

            SOURCE_COMMIT=$(git rev-parse HEAD)
            SOURCE_REPO="${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"

            USERNAME=${CIRCLE_USERNAME}

            # Extract the email from the user info
            ID=$(curl https://api.github.com/users/$USERNAME | jq -r '.id')
            USER_EMAIL="${ID}+${USERNAME}@users.noreply.github.com"

            # Git operations with committer's identity
            git config --global user.name "${USERNAME}"
            git config --global user.email "${USER_EMAIL}"



            #set up src directory
            src_dir=$(mktemp -d)
            cd $src_dir
            git init
            git remote add origin "https://x-access-token:${<< parameters.token-name >>}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git"


            if [ "<< parameters.force-push >>" = true ]; then
              # in case we are force pushing, we want a clean branch that we can push to
              echo "Creating orphan branch for to always have a clean history for ${pages_branch}"
              git checkout --orphan "${pages_branch}"
            else
              # Check if branch exists on remote
              if git ls-remote --heads origin "${pages_branch}" | grep -q "${pages_branch}"; then
                  echo "Branch ${pages_branch} exists on remote, checking out..."
                  git fetch origin "${pages_branch}"
                  git checkout -b ${pages_branch} FETCH_HEAD
              else
                  echo "Branch ${pages_branch} does not exist, creating..."
                  git checkout --orphan "${pages_branch}"
              fi
            fi

            # Copy new files
            cp -a ${pages_folder}/. .

            # Commit and push
            git add .
            git commit -m "Deploying to ${pages_branch} from @ ${SOURCE_REPO}@${SOURCE_COMMIT} ðŸš€"

            if [ "<< parameters.force-push >>" = true ]; then
              git push --set-upstream origin ${pages_branch} --force
            else
              git push --set-upstream origin ${pages_branch} 
            fi

  setup-python-env:
    steps:
      - run:
          name: Install uv
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
      - run:
          name: Set up Python
          command: uv python install
      - run:
          name: Install project dependencies
          command: uv sync --all-extras --dev
jobs:
  chain-metadata:
    machine:
      image: ubuntu-2004:current
    steps:
      - checkout
      - setup-python-env
      - run:
          name: Chain Metadata
          command: uv run opdata chains chain_metadata_updates
          environment:
            OPLABS_ENV: prod
  deploy-github-pages:
    machine:
      image: ubuntu-2004:current
    steps:
      - run:
          name: Clone the repository

          command: |
            git clone --depth 1 "$CIRCLE_REPOSITORY_URL" --branch "$CIRCLE_BRANCH" .
      - setup-python-env
      - run:
          name: Build Static Content
          command: make html
      # Copy directories to serve
      - run:
          name: Copy Directories To Serve
          command: |
            #this copies everything from the build directory to the docs directory
            make html-copies
            tmp_dir="/tmp/docs"
            mkdir -p $tmp_dir
            cp -r docs/* $tmp_dir
            touch $tmp_dir/.nojekyll

      - utils/get-github-access-token
      # - utils/github-pages-deploy:
      #     force-push: true
      #     src-pages-dir: /tmp/docs
      #     pages-branch: gh-pages-test-2
      - push-test:
          force-push: false
          src-pages-dir: /tmp/docs
          pages-branch: gh-pages-test-2

  defillama-protocols:
    machine:
      image: ubuntu-2004:current
    steps:
      - run:
          name: Clone the repository
          command: |
            git clone --depth 1 "$CIRCLE_REPOSITORY_URL" --branch "$CIRCLE_BRANCH" .
      - setup-python-env
      - run:
          name: DefiLlama Protocol TVL
          command: uv run opdata pulls defillama_protocol_tvl
          environment:
            OPLABS_RUNTIME: "gha"
            OPLABS_ENV: "prod"

      - run:
          name: DefiLlama Historical Chain TVL
          command: uv run opdata pulls defillama_historical_chain_tvl
          environment:
            OPLABS_RUNTIME: "gha"
            OPLABS_ENV: "prod"

  daily-uploads-other-tasks:
    machine:
      image: ubuntu-2004:current
    steps:
      - checkout
      - setup-python-env
      - run:
          name: L2Beat
          command: uv run opdata pulls l2beat
          environment:
            OPLABS_RUNTIME: "gha"
            OPLABS_ENV: "prod"

      - run:
          name: DefiLlama Stablecoins
          command: uv run opdata pulls defillama_stablecoins
          environment:
            OPLABS_RUNTIME: "gha"
            OPLABS_ENV: "prod"

      - run:
          name: DefiLlama DEX Volume, Fees, Revenue
          command: uv run opdata pulls defillama_dexs_fees_revenue
          environment:
            OPLABS_RUNTIME: "gha"
            OPLABS_ENV: "prod"

      - run:
          name: GitHub Analytics
          command: uv run opdata pulls github_analytics
          environment:
            OPLABS_RUNTIME: "gha"
            OPLABS_ENV: "prod"

      - run:
          name: GrowThePie Chain Summary
          command: uv run opdata pulls growthepie_chain_summary
          environment:
            OPLABS_RUNTIME: "gha"
            OPLABS_ENV: "prod"

      - run:
          name: DefiLlama Stablecoins BQ
          command: uv run opdata pulls defillama_stablecoins_bq
          environment:
            OPLABS_RUNTIME: "gha"
            OPLABS_ENV: "prod"

workflows:
  version: 2
  daily-api-uploads:
    when:
      or:
        - equal: [<< pipeline.parameters.run_job >>, "run_daily_upload"]
        - equal: [run_daily_upload, <<pipeline.schedule.name>>]
    jobs:
      - defillama-protocols:
          context: op-analytics
      - daily-uploads-other-tasks:
          context: op-analytics
  run-daily-metadata:
    when:
      or:
        - equal: [<< pipeline.parameters.run_job >>, "run_daily_metadata"]
        - equal: [run_daily_metadata, <<pipeline.schedule.name>>]
    jobs:
      - chain-metadata:
          context: op-analytics

  merge-to-main:
    when:
      not:
        equal: [<< pipeline.trigger_source >>, "api"]
    jobs:
      - deploy-github-pages:
          context:
            - circleci-repo-op-analytics
            - op-analytics
          # filters:
          #   branches:
          #     only: main
