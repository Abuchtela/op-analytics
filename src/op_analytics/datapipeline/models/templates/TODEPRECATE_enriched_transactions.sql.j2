WITH

-- Select the columns that we want from transactions joined to blocks.
-- Include some minor transformations that are needed for further calculations.
base_level_transactions AS (
  SELECT
    -- Raw Transaction fields
    t.*,
    -- Fees
    total_gas_fee_native() AS total_gas_fee_native
        l1_gas_fee_native() END AS l1_fee_native,
        l2_gas_fee_native() AS l2_fee_native,
                l2_priority_gas_fee_native() AS l2_priority_fee_native,
                l2_base_gas_fee_native() AS l2_base_fee_native,
    -- TODO: Separate L1 Fee in to Blobs vs L1 Fee Contribution - TBD if we do this here or in the next step
    -- Gas Prices
    wei_to_gwei(b.gas_price) AS l2_gas_price_gwei,
        wei_to_gwei(b.base_fee_per_gas) AS l2_base_gas_price_gwei,
        CASE WHEN t.max_priority_fee_per_gas = 0 THEN 0
                ELSE wei_to_gwei(t.gas_price - b.base_fee_per_gas)
        END AS l2_priority_gas_price_gwei,
        wei_to_gwei(t.gas_price - b.base_fee_per_gas) AS l2_legacy_priority_gas_price_gwei,

    wei_to_gwei(t.receipt_l1_gas_price) AS l1_base_gas_price_gwei,
    wei_to_gwei(t.receipt_l1_blob_base_fee) AS l1_blob_base_gas_price_gwei,
    -- L1 Fee BASE and BLOB scalars
    coalesce(16 * micro(t.receipt_l1_base_fee_scalar), t.receipt_l1_fee_scalar::DECIMAL(12, 6))
      AS l1_base_scalar,
    coalesce(micro(t.receipt_l1_blob_base_fee_scalar), 0) AS l1_blob_scalar,

    -- Transaction Attributes
    hexstr_bytelen(t.input) AS input_byte_length,
    hexstr_calldata_gas(t.input) AS input_calldata_gas,
    hexstr_method_id(t.input) AS method_id,
    transaction_type = 126 AS is_system_transaction,
    ( -- Attributes Deposited Spec https://specs.optimism.io/protocol/deposits.html#l1-attributes-deposited-transaction
        transaction_type = 126
        AND from_address = lower('0xDeaDDEaDDeAdDeAdDEAdDEaddeAddEAdDEAd0001')
        AND to_address = lower('0x4200000000000000000000000000000000000015')
     ) AS is_attributes_deposited_transaction,

    -- Convenience columns
    epoch_to_hour(t.block_timestamp) AS block_hour,
    t.receipt_status = 1 AS success

  FROM ingestion_transactions_v1 AS t
  INNER JOIN pb AS b ON t.block_number = b.number
  WHERE 1=1
    -- Optional address filter for faster results when developing.
    -- AND from_address LIKE '0x00%'  
),




SELECT
        bl.*
        -- Add fallback l1 gas estimate based on observed fee and weighted gas and blob prices.
        , coalesce(
        receipt_l1_gas_used,
        round(16 * receipt_l1_fee / (
                (l1_base_scalar * receipt_l1_gas_price)
                + (l1_blob_scalar * receipt_l1_blob_base_fee)
        ))::INT64
        ) AS derived_l1_gas_used
        -- Add event emitting transaction fields
        , COALESCE(eet.count_total_events,0) AS log_count_total_events
        , COALESCE(eet.count_approval_events,0) AS log_count_approval_events
        , COALESCE(eet.count_wrapping_events,0) AS log_count_wrapping_events
        , COALESCE(eet.count_transfer_events,0) AS log_count_transfer_events

  FROM base_level_transactions bl 
  LEFT JOIN event_emitting_transactions eet
        ON eet.block_number = bl.block_number
        AND eet.transaction_hash = bl.transaction_hash
