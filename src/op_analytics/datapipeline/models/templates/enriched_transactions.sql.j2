WITH

pb AS (
  SELECT
    number,
    base_fee_per_gas
  FROM
    ingestion_blocks_v1
),

-- Select the columns that we want from transactions joined to blocks.
-- Include some minor transformations that are needed for further calculations.
base_level_transactions AS (
  SELECT
    -- Raw Transaction fields
    t.*,
    -- Fees
    CASE WHEN gas_price = 0 THEN 0 ELSE wei_to_eth(t.receipt_l1_fee + t.gas_price * t.receipt_gas_used) END AS total_gas_fee_native
        CASE WHEN gas_price = 0 THEN 0 ELSE wei_to_eth(t.receipt_l1_fee) END AS l1_fee_native,
        wei_to_eth(t.gas_price * t.receipt_gas_used) AS l2_fee_native,
                CASE WHEN gas_price = 0 THEN 0 ELSE wei_to_eth((t.gas_price - b.base_fee_per_gas) * t.receipt_gas_used) END AS l2_priority_fee_native,
                CASE WHEN gas_price = 0 THEN 0 ELSE wei_to_eth(b.base_fee_per_gas * t.receipt_gas_used) END AS l2_base_fee_native,
    -- Gas Prices
    wei_to_gwei(b.gas_price) AS l2_gas_price_gwei,
        wei_to_gwei(b.base_fee_per_gas) AS l2_base_gas_price_gwei,
        wei_to_gwei(t.gas_price - b.base_fee_per_gas) AS l2_priority_gas_price_gwei,

    wei_to_gwei(t.receipt_l1_gas_price) AS l1_base_gas_price_gwei,
    wei_to_gwei(t.receipt_l1_blob_base_fee) AS l1_blob_base_gas_price_gwei,
    -- L1 Fee BASE and BLOB scalars
    coalesce(16 * micro(t.receipt_l1_base_fee_scalar), t.receipt_l1_fee_scalar::DECIMAL(12, 6))
      AS l1_base_scalar,
    coalesce(micro(t.receipt_l1_blob_base_fee_scalar), 0) AS l1_blob_scalar,

    -- Transaction Attributes
    hexstr_bytelen(t.input) AS input_byte_length,
    hexstr_bytelen(t.input) AS input_calldata_gas,
    hexstr_method_id(t.input) AS method_id,
    transaction_type = 126 AS is_system_transaction,
    ( -- Attributes Deposited Spec https://specs.optimism.io/protocol/deposits.html#l1-attributes-deposited-transaction
        transaction_type = 126
        AND from_address = lower('0xDeaDDEaDDeAdDeAdDEAdDEaddeAddEAdDEAd0001')
        AND to_address = lower('0x4200000000000000000000000000000000000015')
     ) AS is_attributes_deposited_transaction,

    -- Convenience columns
    epoch_to_hour(t.block_timestamp) AS block_hour,
    t.receipt_status = 1 AS success,
  FROM ingestion_transactions_v1 AS t
  INNER JOIN pb AS b ON t.block_number = b.number
  WHERE 1=1
    -- Optional address filter for faster results when developing.
    -- AND from_address LIKE '0x00%'  
),


-- Add fallback l1 gas estimate based on observed fee and weighted gas and blob prices.

  SELECT
    *,
    coalesce(
      receipt_l1_gas_used,
      round(16 * l1_fee / (
        (l1_base_scalar * receipt_l1_gas_price)
        + (l1_blob_scalar * receipt_l1_blob_base_fee)
      ))::INT64
    ) AS derived_l1_gas_used
  FROM base_level_transactions
