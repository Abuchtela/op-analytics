WITH

pb AS (
  SELECT
    number,
    base_fee_per_gas
  FROM
    ingestion_blocks_v1
),

-- Select the columns that we want from logs joined to blocks and transactions.
-- Include some minor transformations that are needed for further calculations.
base_level_logs AS (
  SELECT
    -- Raw Logs fields
    l.*,
    -- Raw Transaction Fields
    t.receipt_gas_used AS tx_gas_used,
    t.receipt_l1_gas_used AS tx_l1_gas_used,
    t.from_address AS tx_from_address,
    t.to_address AS tx_to_address,
    t.receipt_gas_used AS tx_gas_used,
    t.derived_l1_gas_used AS tx_l1_gas_used
    -- Fees
    total_gas_fee_native() AS total_gas_fee_native
        l1_gas_fee_native() END AS l1_fee_native,
        l2_gas_fee_native() AS l2_fee_native,
                l2_priority_gas_fee_native() AS l2_priority_fee_native,
                l2_base_gas_fee_native() AS l2_base_fee_native,
    -- Gas Prices
    wei_to_gwei(b.gas_price) AS l2_gas_price_gwei,
        wei_to_gwei(b.base_fee_per_gas) AS l2_base_gas_price_gwei,
        wei_to_gwei(t.gas_price - b.base_fee_per_gas) AS l2_priority_gas_price_gwei,

    wei_to_gwei(t.receipt_l1_gas_price) AS l1_base_gas_price_gwei,
    wei_to_gwei(t.receipt_l1_blob_base_fee) AS l1_blob_base_gas_price_gwei,
    -- L1 Fee BASE and BLOB scalars
    coalesce(16 * micro(t.receipt_l1_base_fee_scalar), t.receipt_l1_fee_scalar::DECIMAL(12, 6))
      AS l1_base_scalar,
    coalesce(micro(t.receipt_l1_blob_base_fee_scalar), 0) AS l1_blob_scalar,

    -- Convenience columns
    epoch_to_hour(t.block_timestamp) AS block_hour,
    epoch_to_day(t.block_timestamp) AS block_date,
    t.receipt_status = 1 AS success,

  FROM ingestion_logs_v1 AS l
  INNER JOIN ingestion_transactions_v1 AS t
  INNER JOIN pb AS b ON t.block_number = b.number
  WHERE 1=1
    -- Optional address filter for faster results when developing.
    -- AND from_address LIKE '0x00%'  
),


-- Add fallback l1 gas estimate based on observed fee and weighted gas and blob prices.

  SELECT
    *,
    coalesce(
      receipt_l1_gas_used,
      round(16 * l1_fee / (
        (l1_base_scalar * receipt_l1_gas_price)
        + (l1_blob_scalar * receipt_l1_blob_base_fee)
      ))::INT64
    ) AS derived_l1_gas_used
  FROM base_level_transactions
